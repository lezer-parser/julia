@precedence {
  immediate
  dot @left
  prefix
  postfix
  interp @left
  typeonlyascription @left
  typeascription @left
  coeff
  call
  power @left
  bitshift @left
  times @left
  plus @left
  range @left
  pipe @left
  pipeback @right
  contains @left
  arrow @right
  band @right
  bor @right
  ternary @right
  pair @right
  assign @right
  regular1
  right0 @right
  regular0
  regular-1
  right-2 @right
  regular-2
}

@top SourceFile {
  expressionList<e, pe> | ""
}

@skip { whitespace | Comment | BlockComment }

// TOP LEVEL

expressionList<e, pe> {
  (e ~id | BareTupleExpression<e> | AssignmentExpression<e> | FunctionAssignmentExpression)
  (!regular0 terminator
    (!regular0 e | BareTupleExpression<e> | AssignmentExpression<e> | FunctionAssignmentExpression))*
  terminator?
}

BareTupleExpression<e> {
  e (!regular-1 "," e)+
}

AssignmentExpression<e> {
  ((e | BareTupleExpression<e>)
  !assign (assignOperator | "=")
  (e | AssignmentExpression<e> | BareTupleExpression<e>))
}

simpleAssignmentExpression<e> {
  e ~id !assign (assignOperator | "=") !assign e
}

simpleExpressionList<e> {
  (e ~id | AssignmentExpression { simpleAssignmentExpression<e> })
  (!regular0 terminator
    (!regular0 e | AssignmentExpression { simpleAssignmentExpression<e> }))*
  terminator?
}

FunctionAssignmentExpression[@dynamicPrecedence=2] {
  Identifier ~id immediateParen !call ArgumentList<e, pe> ~id
  (kw<"where"> TypeArgumentList<e>)?
  !assign (assignOperator | "=")
  !assign (e | AssignmentExpression<e>)
}

// STATEMENTS

statement {
  IfStatement |
  TryStatement |
  ForStatement |
  WhileStatement |
  LetStatement |
  ConstStatement |
  GlobalStatement |
  LocalStatement |
  QuoteStatement |
  BreakStatement |
  ContinueStatement |
  ReturnStatement |
  ImportStatement |
  ExportStatement
}

IfStatement[closedBy="end else elseif"] {
  kw<"if"> e terminator?
    expressionList<e, pe>?
  ElseifClause*
  ElseClause?
  end
}

ElseifClause[closedBy="end else elseif"] {
  kw<"elseif"> e terminator?
    expressionList<e, pe>?
}

ElseClause[closedBy="end"] {
  kw<"else">
    expressionList<e, pe>?
}

TryStatement[closedBy="end catch finally"] {
  kw<"try">
    expressionList<e, pe>?
  CatchClause?
  FinallyClause?
  end
}

CatchClause[closedBy="end finally"] {
  kw<"catch"> Identifier? !regular1 terminator?
    expressionList<e, pe>?
}

FinallyClause[closedBy="end"] {
  kw<"finally"> terminator?
    expressionList<e, pe>?
}

ForStatement[closedBy="end"] {
  !regular0 kw<"for"> ForBinding<e, pe> ("," ForBinding<e, pe>)* terminator?
    expressionList<e, pe>?
  end
}

WhileStatement[closedBy="end"] {
  !regular0 kw<"while"> !regular0 e !regular0 terminator? !regular0 expressionList<e, pe>? end
}

BreakStatement {
  kw<"break">
}

ContinueStatement {
  kw<"continue">
}

ReturnStatement {
  kw<"return"> (!right-2 (e | BareTupleExpression<e>))?
}

LetStatement[closedBy="end"] {
  kw<"let"> VariableDeclaration ("," VariableDeclaration)* terminator? expressionList<e, pe>? end
}

ConstStatement {
  kw<"const"> (VariableDeclaration (!right0 "," VariableDeclaration)*)
}

GlobalStatement {
  kw<"global"> (VariableDeclaration (!right0 "," VariableDeclaration)*)
}

LocalStatement {
  kw<"local"> (VariableDeclaration (!right0 "," VariableDeclaration)*)
}

VariableDeclaration {
  (Identifier | InterpolationExpression<pe>) (!right0 "=" e)?
}

QuoteStatement[closedBy="end"] {
  kw<"quote"> expressionList<e, pe>? end
}

ImportStatement {
  !right0 (kw<"using"> | kw<"import">)
  !right0 (Import | SelectedImport)
}

Import {
  (Identifier | ScopedIdentifier | RenamedIdentifier)
  (!right0 "," (Identifier | ScopedIdentifier | RenamedIdentifier))*
}

SelectedImport[@dynamicPrecedence=1] {
  (Identifier | ScopedIdentifier)
  !immediate immediateColon ":"
  list {
    (RenamedImport | Identifier | MacroIdentifier | Operator)
    (!right0 "," !right0 (RenamedImport | Identifier | MacroIdentifier | Operator))*
  }
}

RenamedIdentifier {
  (Identifier | ScopedIdentifier) kw<"as"> Identifier
}

RenamedImport {
  (Identifier | ScopedIdentifier | MacroIdentifier | Operator) kw<"as"> (Identifier | MacroIdentifier | Operator)
}

ExportStatement {
  kw<"export"> Identifier (!right0 "," Identifier)*
}

// DEFINITIONS

definition {
  PrimitiveDefinition |
  AbstractDefinition |
  StructDefinition |
  ModuleDefinition |
  BareModuleDefinition |
  MacroDefinition |
  FunctionDefinition
}

FunctionDefinition[closedBy="end"] {
  !regular0 kw<"function">
    definitionHead
    params[@dynamicPrecedence=1] {
      !immediate immediateParen !immediate ArgumentList<e, pe>
      ReturnType {
        !typeascription "::" pe
      }?
    }?
    expressionList<e, pe>? 
  end
}

MacroDefinition[closedBy="end"] {
  kw<"macro"> definitionHead immediateParen ArgumentList<e, pe>
    expressionList<e, pe>?
  end
}

PrimitiveDefinition[closedBy="end"] {
  kw<"primitive"> kw<"type"> pe Number end
}

AbstractDefinition[closedBy="end"] {
  kw<"abstract"> kw<"type"> pe end
}

StructDefinition[closedBy="end"] {
  kw<"mutable">? kw<"struct"> pe !regular0 expressionList<e, pe>? end
}

ModuleDefinition[closedBy="end"] {
  kw<"module"> Identifier
    expressionList<e, pe>? 
  end
}

BareModuleDefinition[closedBy="end"] {
  kw<"baremodule"> Identifier
    expressionList<e, pe>?
  end
}

definitionHead {
  InterpolationExpression<definitionHead> |
  FieldExpression<definitionHead> |
  SubscriptExpression<definitionHead> |
  QuoteExpression<definitionHead> |
  ParameterizedIdentifier<e, definitionHead> |
  Identifier ~id |
  ParenthesizedExpression<definitionHead> |
  Operator ~op
}

// EXPRESSIONS

e {
  statement |
  definition |
  CompoundExpression |
  PairExpression<e> |
  MacroExpression<e, pe> |
  UnaryExpression<e> |
  BinaryExpression<e> |
  TernaryExpression<e> |
  FunctionExpression<e, pe> |
  FunctionExpression[closedBy="end"] { verboseFunctionExpression } |
  CoefficientExpression<e> |
  RangeExpression<e> |
  SpreadExpression<e> |
  Operator[group="operator"] { ":" ~op } |
  pe
}

pe {
  InterpolationExpression<pe> |
  FieldExpression<pe> |
  SubscriptExpression<pe> |
  QuoteExpression<pe> |
  CallExpression<e, pe> |
  Identifier ~id |
  Character |
  Number |
  Symbol |
  String |
  TripleString |
  CommandString |
  PrefixedString |
  ParenthesizedExpression<e> |
  TupleExpression<e, pe> |
  ArrayExpression<e> |
  ArrayComprehensionExpression<e, pe> |
  MatrixExpression<e> |
  GeneratorExpression<e, pe> |
  TypedExpression<pe> |
  ParameterizedIdentifier<e, pe> |
  Operator ~op
}

ParameterizedIdentifier<e, pe> {
  pe
  !immediate immediateBrace !immediate
  TypeArgumentList<e>
}

TypeArgumentList[closedBy="}"]<e> {
  "{" e ("," e)* ","? "}"
}

FieldExpression<pe> {
  pe
  !immediate immediateDot !dot "." !dot
  (Identifier | QuoteExpression<pe> | InterpolationExpression<pe>)
}

SubscriptExpression[closedBy="]"]<pe> {
  pe !immediate immediateBracket "["
    (
      GeneratorExpression { s_e comprehensionClause<s_e, s_pe> } |
      (s_e |
       AssignmentExpression {
         s_e !assign (assignOperator | "=") s_e
       })
      ("," (s_e |
            AssignmentExpression {
              s_e !assign (assignOperator | "=") s_e
            }))*
    )?
    ","?
  "]"
}

s_e {
  statement |
  definition |
  CompoundExpression |
  PairExpression<s_e> |
  MacroExpression<s_e, s_pe> |
  UnaryExpression<s_e> |
  BinaryExpression<s_e> |
  TernaryExpression<s_e> |
  FunctionExpression<s_e, s_pe> |
  CoefficientExpression<s_e> |
  RangeExpression<s_e> |
  SpreadExpression<s_e> |
  Operator[group="operator"] { ":" ~op } |
  s_pe
}

s_pe {
  InterpolationExpression<s_pe> |
  FieldExpression<s_pe> |
  SubscriptExpression<s_pe> |
  QuoteExpression<s_pe> |
  CallExpression<s_e, s_pe> |
  Identifier ~id |
  Character |
  Number |
  Symbol |
  String |
  TripleString |
  CommandString |
  PrefixedString |
  ParenthesizedExpression<s_e> |
  TupleExpression<s_e, s_pe> |
  ArrayExpression<s_e> |
  ArrayComprehensionExpression<s_e, s_pe> |
  MatrixExpression<s_e> |
  GeneratorExpression<s_e, s_pe> |
  TypedExpression<s_pe> |
  ParameterizedIdentifier<s_e, s_pe> |
  Operator ~op |
  kw<"end">
}

SpreadExpression<pe> {
  pe !dot "..."
}

PairExpression<e> {
  e !pair "=>" e
}

TernaryExpression<e> {
  e
  !ternary ternary1 !ternary
  e
  !ternary ternary2 !ternary
  e
}

TypedExpression<pe> {
  pe !typeascription ("::" | "<:") !typeascription pe |
  ("::" | "<:") !typeonlyascription pe
}

InterpolationExpression[@dynamicPrecedence=2]<pe> {
  "$" !interp pe
}

Symbol {
  ":" !interp Identifier
}

QuoteExpression[@dynamicPrecedence=2]<pe> {
  ":" !interp pe
}

CoefficientExpression[@dynamicPrecedence=1]<e> {
  Number !coeff (ParenthesizedExpression<e> | Identifier)
}

CompoundExpression[closedBy="end"] {
  kw<"begin"> expressionList<e, pe> end
}

CallExpression<e, pe> {
  pe
  !call immediateParen
  !call args[@dynamicPrecedence=1] { ArgumentList<e, pe> }
  DoClause?
}

DoClause[closedBy="end"] {
  kw<"do"> expressionList<e, pe> end
}

ArgumentList[closedBy=")"]<e, pe> {
  "("
  (arg<e, pe> ~id ("," arg<e, pe> ~id)*)?
  (";" arg<e, pe> ("," arg<e, pe>)*)?
  ","?
  ")"
}

arg<e, pe> {
  (e | NamedArgument { NamedField<e, pe>  }) ~id
}

ParenthesizedExpression[closedBy=")"]<e> {
  "(" !regular1 simpleExpressionList<e> !regular1 ")"
}

TupleExpression[closedBy=")"]<e, pe> {
  "("
    (
    (tupleelem<e, pe> ~id !regular0 ",") |
    (tupleelem<e, pe> ~id (!regular0 "," tupleelem<e, pe> ~id)+ ","?)
    )?
  ")"
}

tupleelem<e, pe> {
  e | NamedField<e, pe>
}

NamedField<e, pe> {
  name { Identifier | TypedExpression<pe> } ~id !assign "=" e
}

MacroIdentifier {
  !regular0 "@" (Identifier | Operator | Operator[group="operator"] { "." })
}

MacroFieldExpression<pe> {
  pe
  !immediate immediateDot !dot "." !dot
  MacroIdentifier
}

verboseFunctionExpression {
  kw<"function"> ArgumentList<e, pe> expressionList<e, pe>? end
}

FunctionExpression<e, pe> {
  (Identifier ~id | ArgumentList<e, pe>) !arrow "->" (e | AssignmentExpression<e>)
}

MacroExpression<e, pe> {
  (MacroIdentifier | MacroFieldExpression<pe>) (!right0
    immediateParen args[@dynamicPrecedence=1] { ArgumentList<e, pe> }
    | MacroArgumentList<e>
  )?
}

MacroArgumentList<e> {
  (!regular-2 (e | AssignmentExpression<e>))+
}

BinaryExpression<e> {
  e !power powerOperator !power e |
  e !bitshift bitshiftOperator !bitshift e |
  e !times timesOperator !times e |
  e !plus ("$" | plusOperator) !plus e |
  e !arrow arrowOperator e |
  e !pipeback "<|" e |
  e !pipe "|>" e |
  e !contains (kw<"in"> | kw<"isa"> | comparisonOperator) !contains e |
  e !bor "||" e |
  e !band "&&" e
}

UnaryExpression<e> {
  (unaryOperatorExtra | plusminus) ~op !prefix e |
  e !postfix ("'" | ".'")
}

Operator[group="operator"] {
  !regular0 (
    "$" |
    "=" |
    assignOperator |
    plusOperator |
    timesOperator |
    powerOperator |
    comparisonOperator
  )
}

ArrayExpression[closedBy="]"]<e> {
  !regular0 "[" "]" |
  !regular0 "["
    !regular0 e
    ("," e)*?
    (!regular0 ",")?
    !regular0 "]"
}

MatrixExpression[closedBy="]"]<e> {
  "["
    !regular-1 MatrixRow<e>
    (";" MatrixRow<e>)* 
    (!regular-1 ";")?
    !regular-1 "]"
}

MatrixRow<e> {
  (!regular-1 e)+
}

ArrayComprehensionExpression[closedBy="]"]<e, pe> {
  "[" !regular0 e !regular0 comprehensionClause<e, pe> "]"
}

GeneratorExpression[closedBy=")"]<e, pe> {
  "(" e comprehensionClause<e, pe> ")"
}

comprehensionClause<e, pe> {
  ForClause<e, pe> (ForClause<e, pe> | IfClause<e, pe>)*
}

IfClause<e, pe> {
  kw<"if"> e
}

ForClause<e, pe> {
  kw<"for"> ForBinding<e, pe> (!regular0 "," ForBinding<e, pe>)*
}

ForBinding<e, pe> {
  (Identifier | TupleExpression<e, pe>) (kw<"in"> | "=" | "∈") e
}

ScopedIdentifier {
  "." !dot ScopedIdentifier |
  (Identifier | ScopedIdentifier)? !dot "." !dot Identifier
}

RangeExpression<e> {
  e !range ":" !range e
}

@skip {} {
  String {
    '"' (stringContent | stringInterpolation)* '"'
  }
  TripleString {
    '"""' (tripleStringContent | stringInterpolation)* '"""'
  }
  CommandString {
    "`" (commandStringContent | stringInterpolation)* "`"
  }
}

stringInterpolation {
  "$" Identifier |
  "$" immediateParen "(" !regular1 e !regular1 ")"
}

prefixedStringPrefix {
  Identifier
  | Identifier !immediate immediateDot !dot "." !dot prefixedStringPrefix
}

PrefixedString {
  PrefixedStringPrefix { prefixedStringPrefix } !immediate content {
    immediateDoubleQuote String |
    immediateDoubleQuote TripleString |
    immediateBackquote CommandString
  }
}

plusOperator {
  "." !immediate nowhitespace (plusOperatorExtra | plusminus) |
  (plusOperatorExtra | plusminus)
}

end { @specialize[@name=end,group="keyword"]<Identifier, "end"> }
kw<term> { @specialize[@name={term},group="keyword"]<Identifier, term> }

@external tokens terminator from "./index.tokens.js" { terminator }
@external tokens Identifier from "./index.tokens.js" { Identifier }
@external tokens BlockComment from "./index.tokens.js" { BlockComment }
@external tokens tripleStringContent from "./index.tokens.js" { tripleStringContent }
@external tokens stringContent from "./index.tokens.js" { stringContent }
@external tokens commandStringContent from "./index.tokens.js" { commandStringContent }
@external tokens layoutExtra from "./index.tokens.js" {
  immediateParen,
  immediateColon,
  immediateBrace,
  immediateBracket,
  immediateDoubleQuote,
  immediateBackquote,
  immediateDot,
  nowhitespace
}

@tokens {
  whitespace {
    " " | "\t" | "\n"
  }
  Comment {
    "#" ![\n]*
  }
  Number {
    (
      "0" $[xX] $[0-9a-fA-F] $[0-9a-fA-F_]* |
      $[0-9] $[0-9_]* "."? ($[0-9] $[0-9_]*)? |
      "." $[0-9] $[0-9_]*
    )
    ($[eE] ("-" | "+")? $[0-9]+)?
  }
  powerOperator {
    "."? ("^" | "↑" | "↓" | "⇵" | "⟰" | "⟱" | "⤈" | "⤉" | "⤊" | "⤋" | "⤒" | "⤓" | "⥉" | "⥌" | "⥍" | "⥏" | "⥑" | "⥔" | "⥕" | "⥘" | "⥙" | "⥜" | "⥝" | "⥠" | "⥡" | "⥣" | "⥥" | "⥮" | "⥯" | "￪" | "￬")
  }
  timesOperator {
    "."? ("*" | "/" | "÷" | "%" | "&" | "⋅" | "∘" | "×" | "\\" | "∩" | "∧" | "⊗" | "⊘" | "⊙" | "⊚" | "⊛" | "⊠" | "⊡" | "⊓" | "∗" | "∙" | "∤" | "⅋" | "≀" | "⊼" | "⋄" | "⋆" | "⋇" | "⋉" | "⋊" | "⋋" | "⋌" | "⋏" | "⋒" | "⟑" | "⦸" | "⦼" | "⦾" | "⦿" | "⧶" | "⧷" | "⨇" | "⨰" | "⨱" | "⨲" | "⨳" | "⨴" | "⨵" | "⨶" | "⨷" | "⨸" | "⨻" | "⨼" | "⨽" | "⩀" | "⩃" | "⩄" | "⩋" | "⩍" | "⩎" | "⩑" | "⩓" | "⩕" | "⩘" | "⩚" | "⩜" | "⩞" | "⩟" | "⩠" | "⫛" | "⊍" | "▷" | "⨝" | "⟕" | "⟖" | "⟗")
  }
  plusOperatorExtra {
    "|||" | "⊕" | "⊖" | "⊞" | "⊟" | "|++|" | "∪" | "∨" | "⊔" | "±" | "∓" | "∔" | "∸" | "≂" | "≏" | "⊎" | "⊻" | "⊽" | "⋎" | "⋓" | "⧺" | "⧻" | "⨈" | "⨢" | "⨣" | "⨤" | "⨥" | "⨦" | "⨧" | "⨨" | "⨩" | "⨪" | "⨫" | "⨬" | "⨭" | "⨮" | "⨹" | "⨺" | "⩁" | "⩂" | "⩅" | "⩊" | "⩌" | "⩏" | "⩐" | "⩒" | "⩔" | "⩖" | "⩗" | "⩛" | "⩝" | "⩡" | "⩢" | "⩣"
  }
  arrowOperator {
    "--" | "-->" | "."?  ("←" | "→" | "↔" | "↚" | "↛" | "↞" | "↠" | "↢" | "↣" | "↦" | "↤" | "↮" | "⇎" | "⇍" | "⇏" | "⇐" | "⇒" | "⇔" | "⇴" | "⇶" | "⇷" | "⇸" | "⇹" | "⇺" | "⇻" | "⇼" | "⇽" | "⇾" | "⇿" | "⟵" | "⟶" | "⟷" | "⟹" | "⟺" | "⟻" | "⟼" | "⟽" | "⟾" | "⟿" | "⤀" | "⤁" | "⤂" | "⤃" | "⤄" | "⤅" | "⤆" | "⤇" | "⤌" | "⤍" | "⤎" | "⤏" | "⤐" | "⤑" | "⤔" | "⤕" | "⤖" | "⤗" | "⤘" | "⤝" | "⤞" | "⤟" | "⤠" | "⥄" | "⥅" | "⥆" | "⥇" | "⥈" | "⥊" | "⥋" | "⥎" | "⥐" | "⥒" | "⥓" | "⥖" | "⥗" | "⥚" | "⥛" | "⥞" | "⥟" | "⥢" | "⥤" | "⥦" | "⥧" | "⥨" | "⥩" | "⥪" | "⥫" | "⥬" | "⥭" | "⥰" | "⧴" | "⬱" | "⬰" | "⬲" | "⬳" | "⬴" | "⬵" | "⬶" | "⬷" | "⬸" | "⬹" | "⬺" | "⬻" | "⬼" | "⬽" | "⬾" | "⬿" | "⭀" | "⭁" | "⭂" | "⭃" | "⭄" | "⭇" | "⭈" | "⭉" | "⭊" | "⭋" | "⭌" | "￩" | "￫" | "⇜" | "⇝" | "↜" | "↝" | "↩" | "↪" | "↫" | "↬" | "↼" | "↽" | "⇀" | "⇁" | "⇄" | "⇆" | "⇇" | "⇉" | "⇋" | "⇌" | "⇚" | "⇛" | "⇠" | "⇢")
  }
  bitshiftOperator {
    ">>" | "<<" | ">>>"
  }
  comparisonOperator {
    "|<:|" | "|>:|" | "."?  (">" | "<" | ">=" | "≥" | "<=" | "≤" | "==" | "===" | "≡" | "!=" | "≠" | "!==" | "≢" | "∈" | "∉" | "∋" | "∌" | "⊆" | "⊈" | "⊂" | "⊄" | "⊊" | "∝" | "∊" | "∍" | "∥" | "∦" | "∷" | "∺" | "∻" | "∽" | "∾" | "≁" | "≃" | "≂" | "≄" | "≅" | "≆" | "≇" | "≈" | "≉" | "≊" | "≋" | "≌" | "≍" | "≎" | "≐" | "≑" | "≒" | "≓" | "≖" | "≗" | "≘" | "≙" | "≚" | "≛" | "≜" | "≝" | "≞" | "≟" | "≣" | "≦" | "≧" | "≨" | "≩" | "≪" | "≫" | "≬" | "≭" | "≮" | "≯" | "≰" | "≱" | "≲" | "≳" | "≴" | "≵" | "≶" | "≷" | "≸" | "≹" | "≺" | "≻" | "≼" | "≽" | "≾" | "≿" | "⊀" | "⊁" | "⊃" | "⊅" | "⊇" | "⊉" | "⊋" | "⊏" | "⊐" | "⊑" | "⊒" | "⊜" | "⊩" | "⊬" | "⊮" | "⊰" | "⊱" | "⊲" | "⊳" | "⊴" | "⊵" | "⊶" | "⊷" | "⋍" | "⋐" | "⋑" | "⋕" | "⋖" | "⋗" | "⋘" | "⋙" | "⋚" | "⋛" | "⋜" | "⋝" | "⋞" | "⋟" | "⋠" | "⋡" | "⋢" | "⋣" | "⋤" | "⋥" | "⋦" | "⋧" | "⋨" | "⋩" | "⋪" | "⋫" | "⋬" | "⋭" | "⋲" | "⋳" | "⋴" | "⋵" | "⋶" | "⋷" | "⋸" | "⋹" | "⋺" | "⋻" | "⋼" | "⋽" | "⋾" | "⋿" | "⟈" | "⟉" | "⟒" | "⦷" | "⧀" | "⧁" | "⧡" | "⧣" | "⧤" | "⧥" | "⩦" | "⩧" | "⩪" | "⩫" | "⩬" | "⩭" | "⩮" | "⩯" | "⩰" | "⩱" | "⩲" | "⩳" | "⩵" | "⩶" | "⩷" | "⩸" | "⩹" | "⩺" | "⩻" | "⩼" | "⩽" | "⩾" | "⩿" | "⪀" | "⪁" | "⪂" | "⪃" | "⪄" | "⪅" | "⪆" | "⪇" | "⪈" | "⪉" | "⪊" | "⪋" | "⪌" | "⪍" | "⪎" | "⪏" | "⪐" | "⪑" | "⪒" | "⪓" | "⪔" | "⪕" | "⪖" | "⪗" | "⪘" | "⪙" | "⪚" | "⪛" | "⪜" | "⪝" | "⪞" | "⪟" | "⪠" | "⪡" | "⪢" | "⪣" | "⪤" | "⪥" | "⪦" | "⪧" | "⪨" | "⪩" | "⪪" | "⪫" | "⪬" | "⪭" | "⪮" | "⪯" | "⪰" | "⪱" | "⪲" | "⪳" | "⪴" | "⪵" | "⪶" | "⪷" | "⪸" | "⪹" | "⪺" | "⪻" | "⪼" | "⪽" | "⪾" | "⪿" | "⫀" | "⫁" | "⫂" | "⫃" | "⫄" | "⫅" | "⫆" | "⫇" | "⫈" | "⫉" | "⫊" | "⫋" | "⫌" | "⫍" | "⫎" | "⫏" | "⫐" | "⫑" | "⫒" | "⫓" | "⫔" | "⫕" | "⫖" | "⫗" | "⫘" | "⫙" | "⫷" | "⫸" | "⫹" | "⫺" | "⊢" | "⊣" | "⟂")
  }
  assignOperator {
    ":=" | "~" | "$=" | "."? ("=" | "+=" | "-=" | "*=" | "/=" | "//=" | "|=|" | "^=" | "÷=" | "%=" | "<<=" | ">>=" | ">>>=" | "||=|" | "&=" | "⊻=" | "≔" | "⩴" | "≕")
  }
  unaryOperatorExtra {
    ">:" | "!" | "~" | "¬" | "√" | "∛" | "∜"
  }
  plusminus {
    "+" | "-"
  }
  Character {
    "'" ("\\" !['] | ![']) "'"
  }
  ternary1 {
    whitespace+ "?" whitespace+
  }
  ternary2 {
    whitespace+ ":" whitespace+
  }
  @precedence {
    Number,
    comparisonOperator,
    "=",
    assignOperator,
    unaryOperatorExtra,
    plusOperatorExtra,
    ".",
    ternary1,
    ternary2,
    whitespace
  }
}
